Given the head of a linked list, remove the nth node from the end of the list and return its head.

1 -> 2 -> 3 -> 4 -> 5 n = 2

1 -> 2 -> 3 -> 5

Approach 1: Two pass 
We can find its length first, the node to be removed would be the position of (length - n + 1)
What I need 
1. Need a cursor to traverse the list to get the length and do the delete operation 
2. I need a reference at the head, so the  cursor can come back 
3. I need something to be the head of the linkedList, so I would miss any corner numeber 

class Solution:
    def removeNthFromEnd(self, head: ListNode, n: int) -> ListNode:
        dummy = ListNode(0) # The "dummy" node is used to simplify some corner cases such as a list with only one node, or removing the head of the list
        dummy.next = cursor = head
        length = 0
        while (cursor):
            length += 1
            cursor = cursor.next 
        length -= n
        cursor = dummy
        while (length > 0):
            length -= 1
            cursor = cursor.next 
        cursor.next = cursor.next.next 
        return dummy.next 
    

Approach 2: One pass (Two Pointer)
The fast pointer advances the list by n  steps from the beginning,
And we move slow and fast together, when fast points at null, slow points at the target position 
dummy -> 1 -> 2 -> 3 -> 4 -> 5, n = 2
s/f    

dummy -> 1 -> 2 -> 3 -> 4 -> 5 -> null, n = 2
s             f             

dummy -> 1 -> 2 -> 3 -> 4 -> 5 -> null, n = 2
                        s          f

s.next = s.next.next 
return dummy.next              